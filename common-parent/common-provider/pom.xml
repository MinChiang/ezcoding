<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <artifactId>common-provider</artifactId>
    <version>1.0.0</version>
    <packaging>pom</packaging>

    <name>common-provider</name>
    <description>ezcoding项目服务提供基础pom</description>

    <parent>
        <groupId>com.ezcoding</groupId>
        <artifactId>common-parent</artifactId>
        <version>1.0.0</version>
        <relativePath>../pom.xml</relativePath>
    </parent>

    <properties>
        <maven-resources-plugin.version>3.1.0</maven-resources-plugin.version>
        <docker-maven-plugin.version>1.0.0</docker-maven-plugin.version>
        <maven-assembly-plugin.version>3.1.0</maven-assembly-plugin.version>
        <spring-boot-maven-plugin.version>2.1.7.RELEASE</spring-boot-maven-plugin.version>
        <resource.delimiter>@</resource.delimiter>
    </properties>

    <profiles>
        <!-- 本地环境 -->
        <profile>
            <id>local</id>
            <properties>
                <environment.name>local</environment.name>
            </properties>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
        <!-- 开发环境 -->
        <profile>
            <id>dev</id>
            <properties>
                <environment.name>dev</environment.name>
            </properties>
        </profile>
        <!-- 测试环境 -->
        <profile>
            <id>test</id>
            <properties>
                <environment.name>test</environment.name>
            </properties>
        </profile>
        <!-- 生产环境 -->
        <profile>
            <id>prod</id>
            <properties>
                <environment.name>prod</environment.name>
            </properties>
        </profile>

        <!-- windows环境 -->
        <profile>
            <id>windows</id>
            <properties>
                <environment.type>windows</environment.type>
            </properties>
        </profile>
        <!-- linux环境 -->
        <profile>
            <id>linux</id>
            <properties>
                <environment.type>linux</environment.type>
            </properties>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
    </profiles>

    <build>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
        <plugins>
            <!-- 资源打包插件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>${maven-resources-plugin.version}</version>
                <configuration>
                    <encoding>UTF-8</encoding>
                    <useDefaultDelimiters>false</useDefaultDelimiters>
                    <delimiters>
                        <delimiter>${resource.delimiter}</delimiter>
                    </delimiters>

                    <!-- 过滤后缀为pem、pfx、p12、dat的证书文件 -->
                    <nonFilteredFileExtensions>
                        <nonFilteredFileExtension>pem</nonFilteredFileExtension>
                        <nonFilteredFileExtension>pfx</nonFilteredFileExtension>
                        <nonFilteredFileExtension>p12</nonFilteredFileExtension>
                        <nonFilteredFileExtension>dat</nonFilteredFileExtension>
                        <nonFilteredFileExtension>cer</nonFilteredFileExtension>
                    </nonFilteredFileExtensions>
                </configuration>
            </plugin>

            <!-- 跳过部署插件 -->
            <!--            <plugin>-->
            <!--                <groupId>org.apache.maven.plugins</groupId>-->
            <!--                <artifactId>maven-deploy-plugin</artifactId>-->
            <!--                <version>${maven-deploy-plugin.version}</version>-->
            <!--                <configuration>-->
            <!--                    <skip>true</skip>-->
            <!--                </configuration>-->
            <!--            </plugin>-->

            <!-- spring boot微服务打包整合插件 -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring-boot-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- 自定义打归档文件包 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>${maven-assembly-plugin.version}</version>
                <configuration>
                    <descriptors>
                        <descriptor>src/main/resources/assembly/assembly-${environment.type}.xml</descriptor>
                    </descriptors>
                </configuration>
            </plugin>

            <!-- docker打包插件 -->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>${docker-maven-plugin.version}</version>
                <configuration>
                    <!-- 镜像名称，注意此处必须小写 -->
                    <imageName>${project.name}:${project.version}</imageName>
                    <!-- Dockerfile的位置，包含需要进行docker构建命令的文件均存放在此目录下 -->
                    <dockerDirectory>${project.basedir}/src/main/resources/docker</dockerDirectory>
                    <skipDockerBuild>false</skipDockerBuild>
                    <resources>
                        <resource>
                            <directory>${project.build.directory}</directory>
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                        <resource>
                            <directory>${project.basedir}/src/main/resources/exec/linux</directory>
                        </resource>
                    </resources>
                    <dockerHost>127.0.0.1</dockerHost>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>